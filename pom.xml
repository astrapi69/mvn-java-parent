<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.alpharogroup</groupId>
	<artifactId>mvn-java-parent</artifactId>
	<version>6.3</version>
	<packaging>pom</packaging>
	<inceptionYear>2015</inceptionYear>

	<name>${project.artifactId}</name>

	<description>
		Parent project for general java projects.
	</description>

	<url>https://github.com/lightblueseas/${project.artifactId}</url>

	<properties>
		<!-- PROJECT encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- LOMBOK version -->
		<lombok.version>1.18.8</lombok.version>
		<!-- UNIT TEST versions -->
		<!-- TESTNG version -->
		<testng.version>6.14.3</testng.version>
		<!-- JUNIT version -->
		<junit.version>4.12</junit.version>
		<!-- ASSERTJ version -->
		<assertj.version>3.12.2</assertj.version>
		<!-- HAMCREST version -->
		<hamcrest.version>1.3</hamcrest.version>
		<!-- MOCKITO-CORE version -->
		<mockito-core.version>2.28.2</mockito-core.version>
		<!-- MEANBEAN version -->
		<meanbean.version>2.0.3</meanbean.version>
		<!-- MEANBEAN-FACTORIES version -->
		<meanbean-factories.version>1.1.1</meanbean-factories.version>
		<!-- RANDOM-BEANS version -->
		<random-beans.version>3.9.0</random-beans.version>
		<!-- JAVA-SEMVER version -->
		<java-semver.version>0.9.0</java-semver.version>
		<!-- JSR305 LIB version -->
		<jsr305.version>3.0.2</jsr305.version>
		<!-- JSR250-API LIB version -->
		<jsr250-api.version>1.0</jsr250-api.version>
		<!-- MAVEN PLUGIN versions -->
		<!-- MAVEN ASSEBLY PLUGIN version -->
		<maven-assembly-plugin.version>3.1.1</maven-assembly-plugin.version>
		<!-- MAVEN CHANGELOG PLUGIN version -->
		<maven-changelog-plugin.version>2.3</maven-changelog-plugin.version>
		<!-- MAVEN CLEAN PLUGIN version -->
		<maven-clean-plugin.version>3.1.0</maven-clean-plugin.version>
		<!-- MAVEN COMPILER PLUGIN version -->
		<java.version>11</java.version>
		<java-release.version>${java.version}</java-release.version>
		<java-target.version>${java.version}</java-target.version>
		<maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
		<maven.compiler.source>${java-release.version}</maven.compiler.source>
		<maven.compiler.target>${java-target.version}</maven.compiler.target>
		<maven.compiler.optimize>true</maven.compiler.optimize>
		<maven.compiler.showWarnings>true</maven.compiler.showWarnings>
		<maven.compiler.debug>true</maven.compiler.debug>
		<!-- MAVEN DEPENDENCY PLUGIN version -->
		<maven-dependency-plugin.version>3.1.1</maven-dependency-plugin.version>
		<!-- MAVEN DEPLOY PLUGIN version -->
		<maven-deploy-plugin.version>3.0.0-M1</maven-deploy-plugin.version>
		<!-- MAVEN ECLIPSE PLUGIN version -->
		<maven-eclipse-plugin.version>2.10</maven-eclipse-plugin.version>
		<!-- MAVEN GPG PLUGIN version -->
		<maven-gpg-plugin.version>1.6</maven-gpg-plugin.version>
		<!-- MAVEN INSTALL PLUGIN versions -->
		<maven-install-plugin.version>3.0.0-M1</maven-install-plugin.version>
		<!-- MAVEN JAVADOC PLUGIN version -->
		<maven-javadoc-plugin.version>3.1.0</maven-javadoc-plugin.version>
		<!-- MAVEN-JAR-PLUGIN versions -->
		<maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
		<!-- MAVEN RELEASE PLUGIN version -->
		<maven-release-plugin.version>2.5.3</maven-release-plugin.version>
		<!-- MAVEN RESOURCES PLUGIN version -->
		<maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
		<!-- MAVEN SOURCE PLUGIN version -->
		<maven-source-plugin.version>3.0.1</maven-source-plugin.version>
		<!-- MAVEN SCM-PUBLISH PLUGIN version -->
		<maven-scm-publish-plugin.version>3.0.0</maven-scm-publish-plugin.version>
		<!-- BUILD-HELPER MAVEN PLUGIN versions -->
		<build-helper-maven-plugin.version>3.0.0</build-helper-maven-plugin.version>
		<!-- FORMATTER-MAVEN-PLUGIN version -->
		<formatter-maven-plugin.version>2.9.0</formatter-maven-plugin.version>
		<!-- NEXUS STAGING MAVEN PLUGIN version -->
		<nexus-staging-maven-plugin.version>1.6.8</nexus-staging-maven-plugin.version>
		<!-- SORTPOM-MAVEN-PLUGIN version -->
		<sortpom-maven-plugin.version>2.10.0</sortpom-maven-plugin.version>
		<!-- VERSIONS-MAVEN-PLUGIN versions -->
		<versions-maven-plugin.version>2.7</versions-maven-plugin.version>
		<!-- -->
		<!-- MAVEN-ANTRUN-PLUGIN version -->
		<maven-antrun-plugin.version>1.8</maven-antrun-plugin.version>
		<!-- MAVEN-PMD-PLUGIN version -->
		<maven-pmd-plugin.version>3.12.0</maven-pmd-plugin.version>
		<!-- MAVEN-SUREFIRE-PLUGIN version -->
		<maven-surefire-plugin.version>3.0.0-M3</maven-surefire-plugin.version>
		<!-- MAVEN-TOOLCHAINS-PLUGIN version -->
		<maven-toolchains-plugin.version>3.0.0</maven-toolchains-plugin.version>
		<!-- COBERTURA-MAVEN-PLUGIN version -->
		<cobertura-maven-plugin.version>2.7</cobertura-maven-plugin.version>
		<!-- COVERAGE-MAVEN-PLUGIN version -->
		<coveralls-maven-plugin.version>4.3.0</coveralls-maven-plugin.version>
		<!-- EXEC-MAVEN-PLUGIN version -->
		<exec-maven-plugin.version>1.6.0</exec-maven-plugin.version>
		<!-- JACOCO-MAVEN-PLUGIN version -->
		<jacoco-maven-plugin.version>0.8.4</jacoco-maven-plugin.version>
		<!-- LICENSE-MAVEN-PLUGIN version -->
		<license-maven-plugin.version>3.0</license-maven-plugin.version>
		<!-- LOMBOK-MAVEN-PLUGIN version -->
		<lombok-maven-plugin.version>1.18.8.0</lombok-maven-plugin.version>
		<!-- PROPERTIES-MAVEN-PLUGIN version -->
		<properties-maven-plugin.version>1.0.0</properties-maven-plugin.version>
	</properties>

	<organization>
		<name>Alpha Ro Group UG (haftungsbeschr√§ngt)</name>
		<url>http://www.alpharogroup.de/</url>
	</organization>

	<licenses>

		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>

	</licenses>

	<developers>

		<developer>
			<id>astrapi69</id>
			<name>Asterios Raptis</name>
			<email>astrapi69 at users.sf.net</email>
			<roles>
				<role>Project manager</role>
				<role>Developer</role>
			</roles>
			<timezone>Berlin</timezone>
		</developer>

	</developers>

	<scm>
		<connection>scm:git:git:@github.com:lightblueseas/${project.artifactId}.git</connection>
		<developerConnection>scm:git:git@github.com:lightblueseas/${project.artifactId}.git</developerConnection>
		<url>git:@github.com:lightblueseas/${project.artifactId}.git</url>
	</scm>

	<issueManagement>
		<system>github</system>
		<url>https://github.com/lightblueseas/${project.artifactId}/issues</url>
	</issueManagement>

	<ciManagement>
		<system>travis-ci</system>
		<url>https://travis-ci.org/lightblueseas/${project.artifactId}</url>
	</ciManagement>

	<dependencyManagement>

		<dependencies>

			<!-- LOMBOK DEPENDENCIES -->
			<dependency>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok</artifactId>
				<version>${lombok.version}</version>
			</dependency>
			<!-- JAVA-SEMVER DEPENDENCIES -->
			<dependency>
				<groupId>com.github.zafarkhaja</groupId>
				<artifactId>java-semver</artifactId>
				<version>${java-semver.version}</version>
			</dependency>
			<!-- JSR305 DEPENDENCY -->
			<dependency>
				<groupId>com.google.code.findbugs</groupId>
				<artifactId>jsr305</artifactId>
				<version>${jsr305.version}</version>
			</dependency>
			<!-- JSR250-API DEPENDENCIES -->
			<dependency>
				<groupId>javax.annotation</groupId>
				<artifactId>jsr250-api</artifactId>
				<version>${jsr250-api.version}</version>
			</dependency>
			<!-- UNIT DEPENDENCIES FOR TESTING -->
			<!-- JUNIT DEPENDENCY -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>
			<!-- TESTNG DEPENDENCY -->
			<dependency>
				<groupId>org.testng</groupId>
				<artifactId>testng</artifactId>
				<version>${testng.version}</version>
			</dependency>
			<!-- ASSERTJ DEPENDENCY -->
			<dependency>
				<groupId>org.assertj</groupId>
				<artifactId>assertj-core</artifactId>
				<version>${assertj.version}</version>
			</dependency>
			<!-- HAMCREST DEPENDENCY -->
			<dependency>
				<groupId>org.hamcrest</groupId>
				<artifactId>hamcrest-all</artifactId>
				<version>${hamcrest.version}</version>
			</dependency>
			<!-- MOCKITO DEPENDENCY -->
			<dependency>
				<groupId>org.mockito</groupId>
				<artifactId>mockito-core</artifactId>
				<version>${mockito-core.version}</version>
			</dependency>
			<!-- MEANBEAN DEPENDENCY -->
			<dependency>
				<groupId>org.meanbean</groupId>
				<artifactId>meanbean</artifactId>
				<version>${meanbean.version}</version>
			</dependency>
			<!-- MEANBEAN-FACTORIES DEPENDENCY -->
			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>meanbean-factories</artifactId>
				<version>${meanbean-factories.version}</version>
			</dependency>
			<!-- RANDOM-BEANS DEPENDENCY -->
			<dependency>
				<groupId>io.github.benas</groupId>
				<artifactId>random-beans</artifactId>
				<version>${random-beans.version}</version>
			</dependency>

		</dependencies>

	</dependencyManagement>

	<dependencies>
		<!-- LOMBOK DEPENDENCIES -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<!-- UNIT TESTS DEPENDENCIES -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- MOCKITO DEPENDENCY -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>

		<resources>

			<resource>
				<filtering>false</filtering>
				<directory>src/main/java</directory>
				<includes>
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
					<exclude>**/package.html</exclude>
				</excludes>
			</resource>

			<resource>
				<filtering>false</filtering>
				<directory>src/main/resources</directory>
			</resource>

			<resource>
				<filtering>false</filtering>
				<directory>src/site</directory>
			</resource>

		</resources>

		<testResources>

			<testResource>
				<filtering>false</filtering>
				<directory>src/test/java</directory>
				<includes>
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
					<exclude>**/package.html</exclude>
				</excludes>
			</testResource>
			<testResource>
				<filtering>false</filtering>
				<directory>src/test/resources</directory>
			</testResource>

		</testResources>

		<pluginManagement>

			<plugins>

				<plugin>
					<inherited>true</inherited>
					<!-- NOTE: We don't need a groupId specification because the group is 
						org.apache.maven.plugins ...which is assumed by default. -->
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<configuration>
						<release>${maven.compiler.source}</release>
						<target>${maven.compiler.target}</target>
						<encoding>${project.build.sourceEncoding}</encoding>
						<optimize>${maven.compiler.optimize}</optimize>
						<showWarnings>${maven.compiler.showWarnings}</showWarnings>
						<debug>${maven.compiler.debug}</debug>
					</configuration>
				</plugin>
				<!-- Configuring maven source plugin: To attach source artifacts to your 
					build we execute the source:jar goal from the source plugin during the package 
					phase. -->
				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-source-plugin</artifactId>
					<version>${maven-source-plugin.version}</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- Configuring maven clean plugin: deletes the generated test-output 
					directories that are generated from testng. -->
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${maven-clean-plugin.version}</version>
					<configuration>
						<filesets>
							<fileset>
								<directory>test-output</directory>
								<followSymlinks>false</followSymlinks>
							</fileset>
						</filesets>
					</configuration>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-install-plugin</artifactId>
					<version>${maven-install-plugin.version}</version>
				</plugin>
				<!-- Configuring Maven Javadoc Plugin: To attach javadoc artifacts to 
					your build we execute the javadoc:jar goal from the javadoc plugin. -->
				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin.version}</version>
					<configuration>
						<detectOfflineLinks>false</detectOfflineLinks>
						<minmemory>128m</minmemory>
						<maxmemory>256m</maxmemory>
						<notimestamp>true</notimestamp>
						<quiet>true</quiet>
						<links>
							<link>http://docs.oracle.com/javase/8/docs/api/</link>
							<link>http://docs.oracle.com/javaee/7/api/</link>
						</links>
					</configuration>
					<executions>
						<execution>
							<id>attach-javadoc</id>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${maven-jar-plugin.version}</version>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-resources-plugin</artifactId>
					<version>${maven-resources-plugin.version}</version>
					<configuration>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>${build-helper-maven-plugin.version}</version>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-eclipse-plugin</artifactId>
					<version>${maven-eclipse-plugin.version}</version>
					<configuration>
						<downloadSources>true</downloadSources>
						<additionalBuildcommands>
							<buildcommand>org.eclipse.m2e.core.maven2Builder</buildcommand>
						</additionalBuildcommands>
						<additionalProjectnatures>
							<projectnature>org.eclipse.m2e.core.maven2Nature</projectnature>
						</additionalProjectnatures>
					</configuration>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>${maven-assembly-plugin.version}</version>
					<configuration>
						<descriptorRefs>
							<descriptorRef>jar-with-dependencies</descriptorRef>
						</descriptorRefs>
					</configuration>
					<executions>
						<execution>
							<id>make-assembly</id>
							<!-- this is used for inheritance merges -->
							<phase>package</phase>
							<!-- append to the packaging phase. -->
							<goals>
								<goal>single</goal>
								<!-- goals == mojos -->
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>${maven-deploy-plugin.version}</version>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-release-plugin</artifactId>
					<version>${maven-release-plugin.version}</version>
					<configuration>
						<mavenExecutorId>forked-path</mavenExecutorId>
					</configuration>
				</plugin>

				<!-- Signing with gpg -->
				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-gpg-plugin</artifactId>
					<version>${maven-gpg-plugin.version}</version>
					<executions>
						<execution>
							<id>sign-artifacts</id>
							<phase>verify</phase>
							<goals>
								<goal>sign</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- The Nexus Staging Maven Plugin is the recommended way to deploy 
					your components to OSSRH and release them to the Central Repository. _______________ 
					If your version is a release version (does not end in -SNAPSHOT) and with 
					this setup in place, you can run a deployment to OSSRH and an automated release 
					to the Central Repository with the usual: mvn clean deploy _________________________ 
					With the property autoReleaseAfterClose set to false you can manually inspect 
					the staging repository in Nexus and trigger a release of the staging repository 
					later with: mvn nexus-staging:release. -->
				<plugin>
					<groupId>org.sonatype.plugins</groupId>
					<artifactId>nexus-staging-maven-plugin</artifactId>
					<version>${nexus-staging-maven-plugin.version}</version>
					<extensions>true</extensions>
					<configuration>
						<serverId>ossrh</serverId>
						<nexusUrl>https://oss.sonatype.org/</nexusUrl>
						<autoReleaseAfterClose>true</autoReleaseAfterClose>
					</configuration>
				</plugin>

				<plugin>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>${maven-dependency-plugin.version}</version>
				</plugin>
				<!-- See usage on: http://maven.apache.org/plugins/maven-changelog-plugin/usage.html -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-changelog-plugin</artifactId>
					<version>${maven-changelog-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>${versions-maven-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>net.revelc.code.formatter</groupId>
					<artifactId>formatter-maven-plugin</artifactId>
					<version>${formatter-maven-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>com.github.ekryd.sortpom</groupId>
					<artifactId>sortpom-maven-plugin</artifactId>
					<version>${sortpom-maven-plugin.version}</version>
				</plugin>
				<!-- -->
				<plugin>
					<groupId>com.mycila</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>${license-maven-plugin.version}</version>
					<configuration>
						<header>src/main/resources/LICENSE.txt</header>
						<properties>
							<owner>Asterios Raptis</owner>
							<year>${project.inceptionYear}</year>
							<email>asterios.raptis@gmx.net</email>
						</properties>
						<excludes>
							<exclude>**/README</exclude>
							<exclude>**/README.md</exclude>
							<exclude>**/LICENSE</exclude>
							<exclude>**/NOTICE</exclude>
							<exclude>**/pom.xml</exclude>
							<exclude>**/pom.xml.bak</exclude>
							<exclude>**/*.xml</exclude>
							<exclude>**/*.xsl</exclude>
							<exclude>**/*.xsd</exclude>
							<exclude>**/*.dtd</exclude>
							<exclude>**/*.html</exclude>
							<exclude>**/*.jsp</exclude>
							<exclude>**/*.jpa</exclude>
							<exclude>**/*.sql</exclude>
							<exclude>**/*.properties</exclude>
							<exclude>**/*.bat</exclude>
							<exclude>**/*.gradle</exclude>
							<exclude>**/*.MF</exclude>
							<exclude>**/*.txt</exclude>
							<exclude>**/*.vm</exclude>
							<exclude>**/*.log</exclude>
							<exclude>**/*.map</exclude>
							<exclude>**/*.js.map</exclude>
							<exclude>**/*.tmpl</exclude>
							<exclude>**/*.js.tmpl</exclude>
							<exclude>**/*.editorconfig</exclude>
							<exclude>**/*.versionsBackup</exclude>
							<exclude>**/*.launch</exclude>
							<exclude>**/*lombok.config</exclude>
							<exclude>src/test/resources/**</exclude>
							<exclude>src/main/resources/**</exclude>
						</excludes>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>format</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
					<configuration>
						<argLine>@{argLine} --illegal-access=permit -Xmx2048m</argLine>
					</configuration>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>${maven-antrun-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.eluder.coveralls</groupId>
					<artifactId>coveralls-maven-plugin</artifactId>
					<version>${coveralls-maven-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>cobertura-maven-plugin</artifactId>
					<version>${cobertura-maven-plugin.version}</version>
					<configuration>
						<format>xml</format>
						<maxmem>256m</maxmem>
						<!-- aggregated reports for multi-module projects -->
						<aggregate>true</aggregate>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-maven-plugin.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
						<execution>
							<id>report</id>
							<phase>test</phase>
							<goals>
								<goal>report</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-pmd-plugin</artifactId>
					<version>${maven-pmd-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>properties-maven-plugin</artifactId>
					<version>${properties-maven-plugin.version}</version>
				</plugin>
				<!--This plugin is used to execute java classes with a main method. -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>${exec-maven-plugin.version}</version>
					<executions>
						<execution>
							<phase>package</phase>
							<goals>
								<goal>java</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!--This plugin is used to delombok lombokified java classes if this 
					is needed. -->
				<plugin>
					<groupId>org.projectlombok</groupId>
					<artifactId>lombok-maven-plugin</artifactId>
					<version>${lombok-maven-plugin.version}</version>
					<executions>
						<execution>
							<phase>generate-sources</phase>
							<goals>
								<goal>delombok</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-toolchains-plugin</artifactId>
					<version>${maven-toolchains-plugin.version}</version>
				</plugin>

			</plugins>

		</pluginManagement>

		<plugins>

			<plugin>
				<inherited>true</inherited>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

		</plugins>

	</build>

	<profiles>
	

		<profile>
			<id>oss.sonatype.org-staged-release</id>
			<!-- This is the profile to use for releasing into the staged release 
				repo. We need to sign the artifacts. -->
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<distributionManagement>
				<repository>
					<id>ossrh</id>
					<name>Nexus Release Repository</name>
					<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
				</repository>
				<snapshotRepository>
					<id>ossrh</id>
					<name>Sonatype Nexus Snapshots</name>
					<url>https://oss.sonatype.org/content/repositories/snapshots</url>
				</snapshotRepository>
			</distributionManagement>

			<build>
				<plugins>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-source-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-gpg-plugin</artifactId>
					</plugin>

				</plugins>
			</build>

		</profile>

		<profile>
			<id>sortpom</id>
			<!-- This is the profile to use for sort the pom.xml. -->
			<activation>
				<property>
					<name>sortpom</name>
					<value>true</value>
				</property>
			</activation>

			<build>

				<plugins>

					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-dependencies</id>
								<phase>package</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}</outputDirectory>
									<overWriteReleases>true</overWriteReleases>
									<overWriteSnapshots>true</overWriteSnapshots>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>net.revelc.code.formatter</groupId>
						<artifactId>formatter-maven-plugin</artifactId>
						<version>${formatter-maven-plugin.version}</version>
						<configuration>
							<configFile>${project.basedir}/src/main/resources/EclipseCodeFormat.xml</configFile>
						</configuration>
					</plugin>

					<plugin>
						<groupId>com.github.ekryd.sortpom</groupId>
						<artifactId>sortpom-maven-plugin</artifactId>
						<version>${sortpom-maven-plugin.version}</version>
						<configuration>
							<encoding>${project.build.sourceEncoding}</encoding>
							<sortOrderFile>${project.basedir}/src/main/resources/sortOrderFile-tmpl.xml</sortOrderFile>
							<sortProperties>false</sortProperties>
							<keepBlankLines>true</keepBlankLines>
							<sortDependencies>scope</sortDependencies>
						</configuration>
						<executions>
							<execution>
								<phase>verify</phase>
								<goals>
									<goal>sort</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>

		</profile>

		<profile>

			<id>changelog-range-100</id>

			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-changelog-plugin</artifactId>
						<version>${maven-changelog-plugin.version}</version>
						<configuration>
							<type>range</type>
							<range>100</range>
						</configuration>
					</plugin>

				</plugins>

			</build>

			<reporting>

				<plugins>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-changelog-plugin</artifactId>
						<version>${maven-changelog-plugin.version}</version>
						<configuration>
							<type>range</type>
							<range>100</range>
						</configuration>
					</plugin>

				</plugins>

			</reporting>

		</profile>

		<profile>

			<id>changelog-range-1000</id>

			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-changelog-plugin</artifactId>
						<version>${maven-changelog-plugin.version}</version>
						<configuration>
							<type>range</type>
							<range>1000</range>
						</configuration>
					</plugin>

				</plugins>

			</build>

			<reporting>

				<plugins>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-changelog-plugin</artifactId>
						<version>${maven-changelog-plugin.version}</version>
						<configuration>
							<type>range</type>
							<range>1000</range>
						</configuration>
					</plugin>

				</plugins>

			</reporting>

		</profile>

		<profile>

			<id>changelog-range-365</id>

			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-changelog-plugin</artifactId>
						<version>${maven-changelog-plugin.version}</version>
						<configuration>
							<type>range</type>
							<range>365</range>
						</configuration>
					</plugin>

				</plugins>

			</build>

			<reporting>

				<plugins>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-changelog-plugin</artifactId>
						<version>${maven-changelog-plugin.version}</version>
						<configuration>
							<type>range</type>
							<range>365</range>
						</configuration>
					</plugin>

				</plugins>

			</reporting>

		</profile>	
		<!--  -->
		<profile>
			<id>release-sign-artifacts</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-gpg-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- This profile is for generate or update the license header from source 
				files. for generate or update the license header you have to run this profile 
				with this goal license:format. -->
			<id>update-license-header</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>

					<plugin>
						<inherited>true</inherited>
						<groupId>com.mycila</groupId>
						<artifactId>license-maven-plugin</artifactId>
					</plugin>

				</plugins>
			</build>

		</profile>

		<profile>
			<id>release-javadoc-jar-with-dependencies</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-assembly-plugin</artifactId>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>generate-reports</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-surefire-plugin</artifactId>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>delombok-src</id>
			<!-- This profile can generate the classes(with all getter and setter 
				and other methods that provide lombok) that uses lombok annotations with 
				the maven-antrun-plugin. -->
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<dependencies>
							<!-- LOMBOK DEPENDENCIES -->
							<dependency>
								<groupId>org.projectlombok</groupId>
								<artifactId>lombok</artifactId>
								<version>${lombok.version}</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>delombok</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<property environment="env"></property>
									<property name="antLombokVersion"
										value="${lombok.version}"></property>
									<target name="javadoc">
										<taskdef
											classname="lombok.delombok.ant.Tasks$Delombok"
											classpath="${env.HOME}/.m2/repository/org/projectlombok/lombok/${antLombokVersion}/lombok-${antLombokVersion}.jar"
											name="delombok"></taskdef>
										<delombok encoding="UTF-8" from="src/main/java"
											to="target/generated-sources/delombok" verbose="true">
											<format value="suppressWarnings:skip"></format>
										</delombok>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>

		</profile>

		<profile>
			<id>delombok-tests</id>
			<!-- This profile can generate the classes(with all getter and setter 
				and other methods that provide lombok) that uses lombok annotations with 
				the maven-antrun-plugin. -->
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<dependencies>
							<!-- LOMBOK DEPENDENCIES -->
							<dependency>
								<groupId>org.projectlombok</groupId>
								<artifactId>lombok</artifactId>
								<version>${lombok.version}</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>delombok</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<property environment="env"></property>
									<property name="antLombokVersion"
										value="${lombok.version}"></property>
									<target name="javadoc">
										<taskdef
											classname="lombok.delombok.ant.Tasks$Delombok"
											classpath="${env.HOME}/.m2/repository/org/projectlombok/lombok/${antLombokVersion}/lombok-${antLombokVersion}.jar"
											name="delombok"></taskdef>
										<delombok encoding="UTF-8" from="src/test/java"
											to="target/generated-sources/test-delombok" verbose="true">
											<format value="suppressWarnings:skip"></format>
										</delombok>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>

		</profile>

		<profile>
			<id>code-coverage-cobertura-html-reporting</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>

				<plugins>

					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>cobertura-maven-plugin</artifactId>
						<configuration>
							<format>html</format>
							<maxmem>512m</maxmem>
							<!-- aggregated reports for multi-module projects -->
							<aggregate>true</aggregate>
						</configuration>
					</plugin>

					<plugin>
						<groupId>org.eluder.coveralls</groupId>
						<artifactId>coveralls-maven-plugin</artifactId>
					</plugin>

				</plugins>

			</build>

			<reporting>

				<plugins>

					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>cobertura-maven-plugin</artifactId>
						<configuration>
							<format>html</format>
							<maxmem>512m</maxmem>
							<!-- aggregated reports for multi-module projects -->
							<aggregate>true</aggregate>
						</configuration>
					</plugin>

				</plugins>

			</reporting>

		</profile>

	</profiles>

</project>
